// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthType {
  email
  google
}

model User {
  id             Int            @id @default(autoincrement())
  firstName      String?
  lastName       String?
  username       String?
  email          String         @unique
  password       String
  status         String         @default("active")
  phone          String?
  gender         String?
  bio            String?
  profilePicUrl  String?
  createdAt      DateTime       @default(now())
  verifiedAt     DateTime?
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?
  lastLoggedInAt DateTime?
  authType       AuthType       @default(email)
  roles          Role[]         @relation("UserRoles")
  posts          Post[]         @relation("UserPosts")
  postComments   PostComment[]
  postReactions  PostReaction[]
}

model Post {
  id            Int            @id @default(autoincrement())
  userId        Int
  title         String
  category      String?
  teaser        String?
  description   String?
  imageUrl      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
  status        String?        @default("published")
  user          User           @relation("UserPosts", fields: [userId], references: [id])
  postComments  PostComment[]
  postReactions PostReaction[]
}

model PostComment {
  id        Int       @id @default(autoincrement())
  postId    Int
  userId    Int
  message   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  user      User      @relation(fields: [userId], references: [id])
  post      Post      @relation(fields: [postId], references: [id])
}

enum PostReactionType {
  like
  dislike
}

model PostReaction {
  id        Int              @id @default(autoincrement())
  postId    Int
  userId    Int
  type      PostReactionType @default(like)
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id])
  post      Post             @relation(fields: [postId], references: [id])
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[] @relation("UserRoles")
}
